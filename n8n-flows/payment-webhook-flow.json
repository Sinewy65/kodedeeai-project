{
  "name": "KodeDeeAI Payment Webhook Flow",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "payment/webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-payment",
      "name": "Payment Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "payment-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Process Stripe webhook payload\nconst payload = $input.first().json;\nconst headers = $input.first().headers;\n\n// Verify webhook signature (in production)\nconst stripeSignature = headers['stripe-signature'];\nconst endpointSecret = $env.STRIPE_WEBHOOK_SECRET;\n\n// Extract event data\nconst event = payload;\nconst eventType = event.type;\nconst eventData = event.data.object;\n\n// Log webhook event\nconsole.log(`Received Stripe webhook: ${eventType}`);\n\n// Process different event types\nlet processedData = {\n  eventType: eventType,\n  eventId: event.id,\n  timestamp: new Date().toISOString(),\n  processed: false,\n  data: eventData\n};\n\nswitch (eventType) {\n  case 'payment_intent.succeeded':\n    processedData = {\n      ...processedData,\n      action: 'activate_subscription',\n      userId: eventData.metadata?.userId,\n      subscriptionPlan: eventData.metadata?.plan,\n      amount: eventData.amount / 100, // Convert from cents\n      currency: eventData.currency,\n      paymentId: eventData.id,\n      processed: true\n    };\n    break;\n\n  case 'payment_intent.payment_failed':\n    processedData = {\n      ...processedData,\n      action: 'payment_failed',\n      userId: eventData.metadata?.userId,\n      failureReason: eventData.last_payment_error?.message,\n      paymentId: eventData.id,\n      processed: true\n    };\n    break;\n\n  case 'customer.subscription.created':\n    processedData = {\n      ...processedData,\n      action: 'subscription_created',\n      customerId: eventData.customer,\n      subscriptionId: eventData.id,\n      plan: eventData.items.data[0]?.price?.nickname,\n      status: eventData.status,\n      processed: true\n    };\n    break;\n\n  case 'customer.subscription.updated':\n    processedData = {\n      ...processedData,\n      action: 'subscription_updated',\n      customerId: eventData.customer,\n      subscriptionId: eventData.id,\n      oldStatus: eventData.previous_attributes?.status,\n      newStatus: eventData.status,\n      processed: true\n    };\n    break;\n\n  case 'customer.subscription.deleted':\n    processedData = {\n      ...processedData,\n      action: 'subscription_cancelled',\n      customerId: eventData.customer,\n      subscriptionId: eventData.id,\n      cancelledAt: eventData.canceled_at,\n      processed: true\n    };\n    break;\n\n  case 'invoice.payment_succeeded':\n    processedData = {\n      ...processedData,\n      action: 'invoice_paid',\n      customerId: eventData.customer,\n      subscriptionId: eventData.subscription,\n      amount: eventData.amount_paid / 100,\n      currency: eventData.currency,\n      invoiceId: eventData.id,\n      processed: true\n    };\n    break;\n\n  default:\n    console.log(`Unhandled webhook event type: ${eventType}`);\n    processedData.processed = false;\n}\n\nreturn processedData;"
      },
      "id": "code-webhook",
      "name": "Process Payment Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.processed }}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-processed",
      "name": "If Event Processed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Update user subscription in database\nconst eventData = $input.first().json;\n\nlet updateQuery = {};\nlet updateData = {};\n\nswitch (eventData.action) {\n  case 'activate_subscription':\n    updateQuery = { _id: eventData.userId };\n    updateData = {\n      $set: {\n        'subscription.status': 'active',\n        'subscription.plan': eventData.subscriptionPlan,\n        'subscription.activatedAt': new Date(),\n        'subscription.lastPayment': {\n          amount: eventData.amount,\n          currency: eventData.currency,\n          paymentId: eventData.paymentId,\n          paidAt: new Date()\n        }\n      },\n      $push: {\n        'paymentHistory': {\n          amount: eventData.amount,\n          currency: eventData.currency,\n          status: 'succeeded',\n          paymentId: eventData.paymentId,\n          plan: eventData.subscriptionPlan,\n          paidAt: new Date()\n        }\n      }\n    };\n    break;\n\n  case 'payment_failed':\n    updateQuery = { _id: eventData.userId };\n    updateData = {\n      $set: {\n        'subscription.lastFailedPayment': {\n          reason: eventData.failureReason,\n          paymentId: eventData.paymentId,\n          failedAt: new Date()\n        }\n      },\n      $push: {\n        'paymentHistory': {\n          status: 'failed',\n          paymentId: eventData.paymentId,\n          failureReason: eventData.failureReason,\n          failedAt: new Date()\n        }\n      }\n    };\n    break;\n\n  case 'subscription_cancelled':\n    updateQuery = { 'subscription.stripeSubscriptionId': eventData.subscriptionId };\n    updateData = {\n      $set: {\n        'subscription.status': 'cancelled',\n        'subscription.cancelledAt': new Date(eventData.cancelledAt * 1000)\n      }\n    };\n    break;\n\n  case 'subscription_updated':\n    updateQuery = { 'subscription.stripeSubscriptionId': eventData.subscriptionId };\n    updateData = {\n      $set: {\n        'subscription.status': eventData.newStatus,\n        'subscription.updatedAt': new Date()\n      }\n    };\n    break;\n\n  default:\n    return { skipped: true, reason: `No database update needed for action: ${eventData.action}` };\n}\n\nreturn {\n  collection: 'users',\n  updateQuery: updateQuery,\n  updateData: updateData,\n  eventData: eventData\n};"
      },
      "id": "code-update",
      "name": "Prepare Database Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "operation": "update",
        "collection": "={{ $json.collection }}",
        "updateKey": "custom",
        "customUpdateKey": "={{ JSON.stringify($json.updateQuery) }}",
        "fieldsUi": {
          "field": [
            {
              "fieldName": "$set",
              "fieldValue": "={{ JSON.stringify($json.updateData.$set) }}"
            },
            {
              "fieldName": "$push",
              "fieldValue": "={{ JSON.stringify($json.updateData.$push) }}"
            }
          ]
        },
        "options": {
          "upsert": false
        }
      },
      "id": "mongodb-update",
      "name": "Update User Database",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [1120, 200],
      "credentials": {
        "mongoDb": {
          "id": "mongodb-kodedeeai",
          "name": "KodeDeeAI MongoDB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Send notification based on event type\nconst eventData = $input.first().json;\nconst dbResult = $('Update User Database').first().json;\n\nlet notification = {\n  type: 'email',\n  template: '',\n  recipient: '',\n  subject: '',\n  data: {}\n};\n\nswitch (eventData.action) {\n  case 'activate_subscription':\n    notification = {\n      type: 'email',\n      template: 'subscription_activated',\n      userId: eventData.userId,\n      subject: 'ยินดีต้อนรับสู่ KodeDeeAI! บัญชีของคุณถูกเปิดใช้งานแล้ว',\n      data: {\n        plan: eventData.subscriptionPlan,\n        amount: eventData.amount,\n        currency: eventData.currency,\n        activatedAt: new Date().toISOString()\n      }\n    };\n    break;\n\n  case 'payment_failed':\n    notification = {\n      type: 'email',\n      template: 'payment_failed',\n      userId: eventData.userId,\n      subject: 'การชำระเงินล้มเหลว - KodeDeeAI',\n      data: {\n        failureReason: eventData.failureReason,\n        retryUrl: `https://app.kodedeeai.com/billing/retry-payment`\n      }\n    };\n    break;\n\n  case 'subscription_cancelled':\n    notification = {\n      type: 'email',\n      template: 'subscription_cancelled',\n      customerId: eventData.customerId,\n      subject: 'การสมัครสมาชิกถูกยกเลิก - KodeDeeAI',\n      data: {\n        cancelledAt: new Date(eventData.cancelledAt * 1000).toISOString(),\n        reactivateUrl: 'https://app.kodedeeai.com/billing/reactivate'\n      }\n    };\n    break;\n\n  default:\n    return { skipNotification: true, reason: `No notification needed for action: ${eventData.action}` };\n}\n\nreturn notification;"
      },
      "id": "code-notification",
      "name": "Prepare Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "url": "https://api.sendgrid.com/v3/mail/send",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.SENDGRID_API_KEY }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"personalizations\": [{\n    \"to\": [{\n      \"email\": \"{{ $json.recipient }}\"\n    }],\n    \"dynamic_template_data\": {{ $json.data }}\n  }],\n  \"from\": {\n    \"email\": \"noreply@kodedeeai.com\",\n    \"name\": \"KodeDeeAI\"\n  },\n  \"template_id\": \"{{ $json.templateId }}\"\n}",
        "options": {}
      },
      "id": "http-email",
      "name": "Send Email Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "webhook_events",
        "fields": "={\n  \"_id\": \"{{ $('Process Payment Event').first().json.eventId }}\",\n  \"type\": \"{{ $('Process Payment Event').first().json.eventType }}\",\n  \"action\": \"{{ $('Process Payment Event').first().json.action }}\",\n  \"processed\": true,\n  \"processedAt\": \"{{ $('Process Payment Event').first().json.timestamp }}\",\n  \"data\": {{ $('Process Payment Event').first().json.data }},\n  \"databaseUpdated\": true,\n  \"notificationSent\": true\n}",
        "options": {}
      },
      "id": "mongodb-log",
      "name": "Log Webhook Event",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "mongoDb": {
          "id": "mongodb-kodedeeai",
          "name": "KodeDeeAI MongoDB"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"received\": true,\n  \"eventType\": \"{{ $('Process Payment Event').first().json.eventType }}\",\n  \"eventId\": \"{{ $('Process Payment Event').first().json.eventId }}\",\n  \"processed\": true,\n  \"timestamp\": \"{{ $('Process Payment Event').first().json.timestamp }}\"\n}"
      },
      "id": "webhook-response-success",
      "name": "Return Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"received\": true,\n  \"eventType\": \"{{ $('Process Payment Event').first().json.eventType }}\",\n  \"eventId\": \"{{ $('Process Payment Event').first().json.eventId }}\",\n  \"processed\": false,\n  \"reason\": \"Event type not supported for processing\"\n}"
      },
      "id": "webhook-response-skipped",
      "name": "Return Skipped Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 600]
    }
  ],
  "connections": {
    "Payment Webhook": {
      "main": [
        [
          {
            "node": "Process Payment Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Payment Event": {
      "main": [
        [
          {
            "node": "If Event Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Event Processed": {
      "main": [
        [
          {
            "node": "Prepare Database Update",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Skipped Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Database Update": {
      "main": [
        [
          {
            "node": "Update User Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update User Database": {
      "main": [
        [
          {
            "node": "Log Webhook Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Notification": {
      "main": [
        [
          {
            "node": "Send Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Notification": {
      "main": [
        [
          {
            "node": "Log Webhook Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Webhook Event": {
      "main": [
        [
          {
            "node": "Return Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "timezone": "Asia/Bangkok",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "id": "payment",
      "name": "Payment"
    },
    {
      "id": "webhook",
      "name": "Webhook"
    },
    {
      "id": "stripe",
      "name": "Stripe"
    },
    {
      "id": "kodedeeai",
      "name": "KodeDeeAI"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-29T00:00:00.000Z",
  "versionId": "1.0.0"
}
